@page "/Kitchen"
@using Microsoft.EntityFrameworkCore
@using Microsoft.AspNetCore.Components.QuickGrid
@using FitnessTracker.Models
@using Radzen
@using Radzen.Blazor
@inject IDbContextFactory<FitnessTracker.Models.FitnessTrackerContext> DbFactory

<PageTitle>Kitchen</PageTitle>
<h1>Kitchen</h1>

<RadzenDataGrid @ref="FoodsDataGrid" Data="@Foods" ColumnWidth="125px" TItem="Food"
    Style="height: 100%; width: 75vw" EditMode="DataGridEditMode.Single" >
    <HeaderTemplate>
        <RadzenButton Shade="Shade.Dark" ButtonStyle="ButtonStyle.Primary" Icon="add_circle" Text="Add Food" Click="@AddFood"/>
    </HeaderTemplate>
    <Columns>
        <RadzenDataGridColumn Property="@nameof(Food.FoodName)" Title="Name" Frozen="true" FrozenPosition="FrozenColumnPosition.Left">
            <EditTemplate Context="food">
                <RadzenTextBox @bind-Value="food.FoodName" Name="foodname" MaxLength="50"/>
                <RadzenRequiredValidator Text="Name is required" Component="foodname" Popup="true"/>
            </EditTemplate>
        </RadzenDataGridColumn>
        <RadzenDataGridColumn Property="@nameof(Food.FoodGroup)" Title="Group">
            <EditTemplate Context="food">
                <RadzenTextBox @bind-Value="food.FoodGroup" Name="foodgroup" MaxLength="50"/>
                <RadzenRequiredValidator Text="'Group is required" Component="foodgroup" Popup="true"/>
            </EditTemplate>
        </RadzenDataGridColumn>
        <RadzenDataGridColumn Property="@nameof(Food.FoodSubGroup)" Title="Sub-Group">
            <EditTemplate Context="food">
                <RadzenTextBox @bind-Value="food.FoodSubGroup" Name="foodsubgroup" MaxLength="50"/>
                <RadzenRequiredValidator Text="Sub-group is required" Component="foodsubgroup" Popup="true"/>
            </EditTemplate>
        </RadzenDataGridColumn>
        <RadzenDataGridColumn Property="@nameof(Food.Notes)" Title="Notes">
            <EditTemplate Context="food">
                <RadzenTextBox @bind-Value="food.Notes" Name="foodnotes" MaxLength="50"/>
            </EditTemplate>
        </RadzenDataGridColumn>
        <RadzenDataGridColumn Property="@nameof(Food.Amount)" Title="Amount (g)">
            <EditTemplate Context="food">
                <RadzenNumeric @bind-Value="food.Amount" Name="foodamount"/>
                <RadzenRequiredValidator Text="Amount is required" Component="foodamount" Popup="true"/>
            </EditTemplate>
        </RadzenDataGridColumn>
        <RadzenDataGridColumn Property="@nameof(Food.Calories)" Title="Calories (kcal)">
            <EditTemplate Context="food">
                <RadzenNumeric @bind-Value="food.Calories" Name="foodcalories"/>
                <RadzenRequiredValidator Text="Calories are required" Component="foodcalories" Popup="true"/>
            </EditTemplate>
        </RadzenDataGridColumn>
        <RadzenDataGridColumn Property="@nameof(Food.Protein)" Title="Protein (g)">
            <EditTemplate Context="food">
                <RadzenNumeric @bind-Value="food.Protein" Name="foodprotein"/>
                <RadzenRequiredValidator Text="Protein is required" Component="foodprotein" Popup="true"/>
            </EditTemplate>
        </RadzenDataGridColumn>
        <RadzenDataGridColumn Property="@nameof(Food.Fat)" Title="Fat (g)">
            <EditTemplate Context="food">
                <RadzenNumeric @bind-Value="food.Fat" Name="foodfat"/>
            </EditTemplate>
        </RadzenDataGridColumn>
        <RadzenDataGridColumn Property="@nameof(Food.Carbohydrates)" Title="Carbohydrates (g)">
            <EditTemplate Context="food">
                <RadzenNumeric @bind-Value="food.Carbohydrates" Name="foodcarbs" />
            </EditTemplate>
        </RadzenDataGridColumn>
        <RadzenDataGridColumn Property="@nameof(Food.Fiber)" Title="Fiber (g)">
            <EditTemplate Context="food">
                <RadzenNumeric @bind-Value="food.Fiber" Name="foodfiber" />
            </EditTemplate>
        </RadzenDataGridColumn>
        <RadzenDataGridColumn Context="food" Title="Editing" TextAlign="TextAlign.Center" Frozen="true" FrozenPosition="FrozenColumnPosition.Right" Width="150px">
            <Template Context="food">
                <RadzenButton Icon="edit" Shade="Shade.Dark" ButtonStyle="ButtonStyle.Primary" Variant="Variant.Flat" Size="ButtonSize.Medium" Click="@(args => EditFood(food))" @onclick:stopPropagation="true" Disabled="@IsEditing"/>
                <RadzenButton Icon="delete" Shade="Shade.Dark" ButtonStyle="ButtonStyle.Danger" Variant="Variant.Flat" Size="ButtonSize.Medium" Click="@(args => DeleteFood(food))" @onclick:stopPropagation="true" Disabled="@IsEditing"/>
            </Template>
            <EditTemplate Context="food">
                <RadzenButton Icon="check" Shade="Shade.Dark" ButtonStyle="ButtonStyle.Success" Variant="Variant.Flat" Size="ButtonSize.Medium" Click="@(args => ConfirmEdit(food))" />
                <RadzenButton Icon="close" Shade="Shade.Dark" ButtonStyle="ButtonStyle.Danger" Variant="Variant.Flat" Size="ButtonSize.Medium" Click="@(args => CancelEdit(food))" />
            </EditTemplate>
        </RadzenDataGridColumn>
    </Columns>
</RadzenDataGrid>

@code
{
    private FitnessTrackerContext context = default!;
    public required List<Food> Foods { get;set; }
    public required RadzenDataGrid<Food> FoodsDataGrid;
    public required bool IsEditing = false;

    protected override async Task OnInitializedAsync()
    {
        await base.OnInitializedAsync();

        context = DbFactory.CreateDbContext();
        Foods = await context.Foods.ToListAsync();

        await FoodsDataGrid.Reload();
        StateHasChanged();
    }

    public async void AddFood()
    {
        Food newFood = new Food();
        IsEditing = true;
        await FoodsDataGrid.InsertRow(newFood);
        await FoodsDataGrid.Reload();
    }

    public async void EditFood(Food food)
    {
        IsEditing = true;
        await FoodsDataGrid.EditRow(food);
    }

    public void DeleteFood(Food food)
    {
        Foods.Remove(food);
        context.Foods.Remove(food);
        context.SaveChanges();
    }

    public async void ConfirmEdit(Food food)
    {
        await FoodsDataGrid.UpdateRow(food);
        IsEditing = false;

        context.Foods.Update(food);
        context.SaveChanges();

        await FoodsDataGrid.Reload();
        StateHasChanged();
    }

    public void CancelEdit(Food food)
    {
        FoodsDataGrid.CancelEditRow(food);
        IsEditing = false;

        if (!Foods.Contains(food))
        { Foods.Remove(food); }

        else
        {
            var foodEntry = context.Entry(food);
            if (foodEntry.State == EntityState.Modified)
            {
                foodEntry.CurrentValues.SetValues(foodEntry.OriginalValues);
                foodEntry.State = EntityState.Unchanged;
            }
        }
    }
}